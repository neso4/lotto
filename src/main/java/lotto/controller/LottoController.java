package lotto.controller;

import java.util.List;
import lotto.constant.LottoRanking;
import lotto.generator.RandomUniqueListGenerator;
import lotto.model.Lotto;
import lotto.model.LottoGameManager;
import lotto.model.LottoOwner;
import lotto.model.LottoResult;
import lotto.model.PurchasePrice;
import lotto.model.WinningLotto;
import lotto.view.InputView;
import lotto.view.OutputView;

public class LottoController {
    private final InputView inputView = new InputView();
    private final OutputView outputView = new OutputView();

    public void run() {
        LottoOwner lottoOwner = getLottoOwner();
        outputView.printLottosInfo(lottoOwner.getLottosInfo());
        Lotto winningNumbers = getWinningNumbersUntilValid();
        outputView.printSpace();
        WinningLotto winningLotto = getWinningLottoUntilValidBonusNumber(winningNumbers);
        LottoGameManager lottoGameManager = LottoGameManager.createGameManager(lottoOwner, winningLotto);
        lottoGameManager.matchLottosWithWinningLotto();
        printWinningStatistics(lottoGameManager);
        outputView.printRateOfReturn(lottoGameManager.getRateOfReturn());
    }

    private LottoOwner getLottoOwner() {
        PurchasePrice purchasePrice = getPurchasePriceUntilValid();
        List<Lotto> randomLottos = Lotto.getAutoGeneratedLottos(purchasePrice, new RandomUniqueListGenerator());
        LottoResult lottoResult = LottoResult.createLottoResult(LottoRanking.convertValuesIntoCounters());
        return LottoOwner.createLottoOwner(purchasePrice, randomLottos, lottoResult);
    }

    private PurchasePrice getPurchasePriceUntilValid() {
        PurchasePrice purchasePrice;
        while (true) {
            try {
                outputView.printEnterPurchaseAmount();
                purchasePrice = PurchasePrice.createPurchase(inputView.getPurchaseAmount());
                break;
            } catch (IllegalArgumentException e) {
                outputView.printText(e.getMessage());
            }
        }
        return purchasePrice;
    }

    private Lotto getWinningNumbersUntilValid() {
        Lotto winningNumbers;
        while (true) {
            try {
                outputView.printEnterWinningNumbers();
                winningNumbers = Lotto.createLottoWithNumbers(inputView.getWinningNumbers());
                break;
            } catch (IllegalArgumentException e) {
                outputView.printText(e.getMessage());
            }
        }
        return winningNumbers;
    }

    private WinningLotto getWinningLottoUntilValidBonusNumber(Lotto winningNumbers) {
        WinningLotto winningLotto;
        while (true) {
            try {
                outputView.printEnterBonusNumber();
                winningLotto = WinningLotto.createWinningLotto(winningNumbers, inputView.getBonusNumber());
                break;
            } catch (IllegalArgumentException e) {
                outputView.printText(e.getMessage());
            }
        }
        return winningLotto;
    }

    private void printWinningStatistics(LottoGameManager lottoGameManager) {
        outputView.printStartMatchingWinningLotto();
        outputView.printWinningStatistics(lottoGameManager.getWinningStatistics());
    }
}
