package lotto.ControllerTest;

import camp.nextstep.edu.missionutils.test.NsTest;
import lotto.Application;
import static camp.nextstep.edu.missionutils.test.Assertions.assertRandomUniqueNumbersInRangeTest;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class LottoControllerTest extends NsTest
{
    public void getBigInputTest() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run("50000", "17,24,29,35,36,44", "13");
                    assertThat(output()).contains(
                            "50개를 구매했습니다.",
                            "[2, 13, 27, 33, 35, 37]",
                            "[5, 11, 18, 24, 31, 40]",
                            "[3, 9, 15, 22, 26, 44]",
                            "[8, 16, 19, 27, 34, 41]",
                            "[6, 12, 20, 28, 32, 45]",
                            "[1, 7, 13, 18, 25, 33]",
                            "[2, 14, 16, 29, 36, 43]",
                            "[6, 10, 21, 24, 38, 40]",
                            "[11, 15, 19, 23, 27, 41]",
                            "[3, 8, 22, 30, 34, 44]",
                            "[9, 17, 25, 28, 37, 42]",
                            "[4, 13, 20, 26, 32, 39]",
                            "[10, 18, 21, 27, 31, 45]",
                            "[5, 12, 19, 23, 33, 40]",
                            "[2, 8, 14, 20, 29, 35]",
                            "[7, 11, 16, 25, 36, 44]",
                            "[1, 9, 17, 26, 34, 41]",
                            "[6, 13, 18, 24, 32, 38]",
                            "[3, 15, 22, 28, 30, 45]",
                            "[12, 19, 21, 29, 31, 37]",
                            "[4, 10, 17, 23, 33, 39]",
                            "[2, 14, 16, 27, 35, 42]",
                            "[5, 11, 18, 20, 31, 44]",
                            "[7, 13, 19, 26, 34, 40]",
                            "[1, 9, 15, 22, 29, 37]",
                            "[6, 12, 21, 28, 32, 43]",
                            "[3, 8, 14, 24, 30, 41]",
                            "[4, 10, 17, 25, 36, 45]",
                            "[9, 15, 23, 29, 33, 38]",
                            "[2, 7, 13, 18, 26, 34]",
                            "[5, 14, 16, 27, 35, 42]",
                            "[1, 8, 19, 22, 30, 39]",
                            "[11, 17, 20, 28, 33, 41]",
                            "[6, 12, 21, 24, 31, 44]",
                            "[3, 9, 15, 23, 32, 40]",
                            "[7, 14, 18, 25, 36, 43]",
                            "[10, 16, 19, 29, 37, 45]",
                            "[4, 13, 22, 26, 34, 38]",
                            "[2, 8, 15, 21, 31, 39]",
                            "[5, 12, 17, 23, 33, 42]",
                            "[1, 9, 16, 27, 30, 41]",
                            "[6, 14, 18, 28, 35, 44]",
                            "[3, 10, 19, 24, 32, 40]",
                            "[7, 13, 20, 25, 36, 45]",
                            "[11, 15, 22, 29, 37, 38]",
                            "[4, 12, 16, 26, 31, 43]",
                            "[8, 14, 17, 27, 34, 39]",
                            "[2, 9, 18, 21, 30, 41]",
                            "[5, 10, 19, 23, 32, 45]",
                            "[1, 6, 13, 22, 29, 40]",
                            "[3, 12, 15, 24, 31, 42]",
                            "[7, 11, 16, 25, 33, 44]",
                            "[2, 8, 14, 20, 27, 35]",
                            "[9, 17, 21, 28, 36, 43]",
                            "[4, 10, 18, 26, 32, 39]",
                            "[1, 5, 12, 19, 24, 34]",
                            "3개 일치 (5,000원) - 10개",
                            "4개 일치 (50,000원) - 2개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 200.0%입니다."
                    );
                },
                List.of(2, 13, 27, 33, 35, 37),
                List.of(5, 11, 18, 24, 31, 40),
                List.of(3, 9, 15, 22, 26, 44),
                List.of(8, 16, 19, 27, 34, 41),
                List.of(6, 12, 20, 28, 32, 45),
                List.of(1, 7, 13, 18, 25, 33),
                List.of(2, 14, 16, 29, 36, 43),
                List.of(6, 10, 21, 24, 38, 40),
                List.of(11, 15, 19, 23, 27, 41),
                List.of(3, 8, 22, 30, 34, 44),
                List.of(9, 17, 25, 28, 37, 42),
                List.of(4, 13, 20, 26, 32, 39),
                List.of(10, 18, 21, 27, 31, 45),
                List.of(5, 12, 19, 23, 33, 40),
                List.of(2, 8, 14, 20, 29, 35),
                List.of(7, 11, 16, 25, 36, 44),
                List.of(1, 9, 17, 26, 34, 41),
                List.of(6, 13, 18, 24, 32, 38),
                List.of(3, 15, 22, 28, 30, 45),
                List.of(12, 19, 21, 29, 31, 37),
                List.of(4, 10, 17, 23, 33, 39),
                List.of(2, 14, 16, 27, 35, 42),
                List.of(5, 11, 18, 20, 31, 44),
                List.of(7, 13, 19, 26, 34, 40),
                List.of(1, 9, 15, 22, 29, 37),
                List.of(6, 12, 21, 28, 32, 43),
                List.of(3, 8, 14, 24, 30, 41),
                List.of(4, 10, 17, 25, 36, 45),
                List.of(9, 15, 23, 29, 33, 38),
                List.of(2, 7, 13, 18, 26, 34),
                List.of(5, 14, 16, 27, 35, 42),
                List.of(1, 8, 19, 22, 30, 39),
                List.of(11, 17, 20, 28, 33, 41),
                List.of(6, 12, 21, 24, 31, 44),
                List.of(3, 9, 15, 23, 32, 40),
                List.of(7, 14, 18, 25, 36, 43),
                List.of(10, 16, 19, 29, 37, 45),
                List.of(4, 13, 22, 26, 34, 38),
                List.of(2, 8, 15, 21, 31, 39),
                List.of(5, 12, 17, 23, 33, 42),
                List.of(1, 9, 16, 27, 30, 41),
                List.of(6, 14, 18, 28, 35, 44),
                List.of(3, 10, 19, 24, 32, 40),
                List.of(7, 13, 20, 25, 36, 45),
                List.of(11, 15, 22, 29, 37, 38),
                List.of(4, 12, 16, 26, 31, 43),
                List.of(8, 14, 17, 27, 34, 39),
                List.of(2, 9, 18, 21, 30, 41),
                List.of(5, 10, 19, 23, 32, 45),
                List.of(1, 6, 13, 22, 29, 40),
                List.of(3, 12, 15, 24, 31, 42),
                List.of(7, 11, 16, 25, 33, 44),
                List.of(2, 8, 14, 20, 27, 35),
                List.of(9, 17, 21, 28, 36, 43),
                List.of(4, 10, 18, 26, 32, 39),
                List.of(1, 5, 12, 19, 24, 34)
        );
    }

    public void getPrecisionTest() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run("7000", "17,24,29,35,36,44", "13");
                    assertThat(output()).contains(
                            "7개를 구매했습니다.",
                            "[3, 16, 21, 28, 32, 41]",
                            "[4, 12, 19, 23, 30, 39]",
                            "[8, 15, 22, 31, 37, 45]",
                            "[6, 13, 17, 24, 29, 38]",
                            "[2, 14, 20, 26, 33, 42]",
                            "[10, 18, 25, 34, 40, 43]",
                            "[1, 9, 17, 27, 35, 44]",
                            "3개 일치 (5,000원) - 1개",
                            "4개 일치 (50,000원) - 0개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 0.7%입니다."
                    );
                },
                List.of(3, 16, 21, 28, 32, 41),
                List.of(4, 12, 19, 23, 30, 39),
                List.of(8, 15, 22, 31, 37, 45),
                List.of(6, 13, 17, 24, 29, 38),
                List.of(2, 14, 20, 26, 33, 42),
                List.of(10, 18, 25, 34, 40, 43),
                List.of(1, 9, 17, 27, 35, 44)
        );
    }

    public void getRepeatInputTest() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run("7001", "7000", "46", "17,24,29,35,36,44", "49", "13");
                    assertThat(output()).contains(
                            "7개를 구매했습니다.",
                            "[3, 16, 21, 28, 32, 41]",
                            "[4, 12, 19, 23, 30, 39]",
                            "[8, 15, 22, 31, 37, 45]",
                            "[6, 13, 17, 24, 29, 38]",
                            "[2, 14, 20, 26, 33, 42]",
                            "[10, 18, 25, 34, 40, 43]",
                            "[1, 9, 17, 27, 35, 44]",
                            "3개 일치 (5,000원) - 1개",
                            "4개 일치 (50,000원) - 0개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 71.4%입니다."
                    );
                },
                List.of(3, 16, 21, 28, 32, 41),
                List.of(4, 12, 19, 23, 30, 39),
                List.of(8, 15, 22, 31, 37, 45),
                List.of(6, 13, 17, 24, 29, 38),
                List.of(2, 14, 20, 26, 33, 42),
                List.of(10, 18, 25, 34, 40, 43),
                List.of(1, 9, 17, 27, 35, 44)
        );
    }

    @Override
    public void runMain()
    {
        Application.main(new String[]{});
    }
}
