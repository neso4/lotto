package lotto;

import camp.nextstep.edu.missionutils.test.NsTest;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;

import static camp.nextstep.edu.missionutils.test.Assertions.assertRandomUniqueNumbersInRangeTest;
import static camp.nextstep.edu.missionutils.test.Assertions.assertSimpleTest;
import static org.assertj.core.api.Assertions.assertThat;

@SuppressWarnings("unchecked")
class ApplicationTest extends NsTest {
    private static final String ERROR_MESSAGE = "[ERROR]";

    @Test
    @DisplayName("기능 테스트")
    void success1() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run("8000", "1,2,3,4,5,6", "7");
                    assertThat(output()).contains(
                            "8개를 구매했습니다.",
                            "[8, 21, 23, 41, 42, 43]",
                            "[3, 5, 11, 16, 32, 38]",
                            "[7, 11, 16, 35, 36, 44]",
                            "[1, 8, 11, 31, 41, 42]",
                            "[13, 14, 16, 38, 42, 45]",
                            "[7, 11, 30, 40, 42, 43]",
                            "[2, 13, 22, 32, 38, 45]",
                            "[1, 3, 5, 14, 22, 45]",
                            "3개 일치 (5,000원) - 1개",
                            "4개 일치 (50,000원) - 0개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 62.5%입니다."
                    );
                },
                List.of(8, 21, 23, 41, 42, 43),
                List.of(3, 5, 11, 16, 32, 38),
                List.of(7, 11, 16, 35, 36, 44),
                List.of(1, 8, 11, 31, 41, 42),
                List.of(13, 14, 16, 38, 42, 45),
                List.of(7, 11, 30, 40, 42, 43),
                List.of(2, 13, 22, 32, 38, 45),
                List.of(1, 3, 5, 14, 22, 45)
        );
    }

    @Test
    @DisplayName("기능 테스트 With 구입금액 오류 재입력 케이스")
    void success2() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run(
                            "12000 ",
                            "12000a",
                            "12 000",
                            "12,000",
                            "-12000",
                            "12009",
                            "12000",
                            "1,2,3,4,5,6",
                            "7"
                    );
                    assertThat(output()).contains(
                            "12개를 구매했습니다.",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[1, 2, 3, 11, 12, 13]",
                            "[1, 2, 3, 7, 12, 13]",
                            "[1, 2, 3, 4, 12, 13]",
                            "[1, 2, 3, 4, 7, 13]",
                            "[1, 2, 3, 4, 5, 13]",
                            "[1, 2, 3, 4, 5, 7]",
                            "[1, 2, 3, 4, 5, 6]",
                            "3개 일치 (5,000원) - 2개",
                            "4개 일치 (50,000원) - 2개",
                            "5개 일치 (1,500,000원) - 1개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 1개",
                            "6개 일치 (2,000,000,000원) - 1개",
                            "총 수익률은 16930083.3%입니다."
                    );
                },
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(1, 2, 3, 11, 12, 13),
                List.of(1, 2, 3, 7, 12, 13),
                List.of(1, 2, 3, 4, 12, 13),
                List.of(1, 2, 3, 4, 7, 13),
                List.of(1, 2, 3, 4, 5, 13),
                List.of(1, 2, 3, 4, 5, 7),
                List.of(1, 2, 3, 4, 5, 6)
        );
    }

    @Test
    @DisplayName("기능 테스트 With 당첨번호 오류 재입력 케이스")
    void success3() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run(
                            "17000",
                            "1, 2, 3,4,5,6  ",
                            "1,2,3,4,5:6",
                            "1,2,3,4,5,6,8",
                            "0,1,2,3,4,5",
                            "1,2,3,4,5,46",
                            "1,2,2,3,4,5",
                            "1,2,3,4,5,6",
                            "7"
                    );
                    assertThat(output()).contains(
                            "17개를 구매했습니다.",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[8, 9, 10, 11, 12, 13]",
                            "[1, 2, 3, 11, 12, 13]",
                            "[1, 2, 3, 11, 12, 13]",
                            "[1, 2, 3, 7, 12, 13]",
                            "3개 일치 (5,000원) - 3개",
                            "4개 일치 (50,000원) - 0개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 88.2%입니다."
                    );
                },
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(8, 9, 10, 11, 12, 13),
                List.of(1, 2, 3, 11, 12, 13),
                List.of(1, 2, 3, 11, 12, 13),
                List.of(1, 2, 3, 7, 12, 13)
        );
    }

    @Test
    @DisplayName("기능 테스트 With 보너스 번호 오류 재입력 케이스")
    void success4() {
        assertRandomUniqueNumbersInRangeTest(
                () -> {
                    run(
                            "8000",
                            "1,2,3,4,5,6",
                            "7 ",
                            "a",
                            "6",
                            "0",
                            "46",
                            "7"
                    );
                    assertThat(output()).contains(
                            "8개를 구매했습니다.",
                            "[8, 21, 23, 41, 42, 43]",
                            "[3, 5, 11, 16, 32, 38]",
                            "[7, 11, 16, 35, 36, 44]",
                            "[1, 8, 11, 31, 41, 42]",
                            "[13, 14, 16, 38, 42, 45]",
                            "[7, 11, 30, 40, 42, 43]",
                            "[2, 13, 22, 32, 38, 45]",
                            "[1, 3, 5, 14, 22, 45]",
                            "3개 일치 (5,000원) - 1개",
                            "4개 일치 (50,000원) - 0개",
                            "5개 일치 (1,500,000원) - 0개",
                            "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
                            "6개 일치 (2,000,000,000원) - 0개",
                            "총 수익률은 62.5%입니다."
                    );
                },
                List.of(8, 21, 23, 41, 42, 43),
                List.of(3, 5, 11, 16, 32, 38),
                List.of(7, 11, 16, 35, 36, 44),
                List.of(1, 8, 11, 31, 41, 42),
                List.of(13, 14, 16, 38, 42, 45),
                List.of(7, 11, 30, 40, 42, 43),
                List.of(2, 13, 22, 32, 38, 45),
                List.of(1, 3, 5, 14, 22, 45)
        );
    }

    @Test
    @DisplayName("예외 테스트")
    void exception() {
        assertSimpleTest(() -> {
            runException("1000j");
            assertThat(output()).contains(ERROR_MESSAGE);
        });
    }

    @Override
    public void runMain() {
        Application.main(new String[]{});
    }
}
